// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class RunEvent implements flatbuffers.IUnpackableObject<RunEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):RunEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsRunEvent(bb:flatbuffers.ByteBuffer, obj?:RunEvent):RunEvent {
  return (obj || new RunEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsRunEvent(bb:flatbuffers.ByteBuffer, obj?:RunEvent):RunEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new RunEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

singleStep():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

mutate_single_step(value:boolean):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt8(this.bb_pos + offset, +value);
  return true;
}

static startRunEvent(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addSingleStep(builder:flatbuffers.Builder, singleStep:boolean) {
  builder.addFieldInt8(0, +singleStep, +false);
}

static endRunEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createRunEvent(builder:flatbuffers.Builder, singleStep:boolean):flatbuffers.Offset {
  RunEvent.startRunEvent(builder);
  RunEvent.addSingleStep(builder, singleStep);
  return RunEvent.endRunEvent(builder);
}

unpack(): RunEventT {
  return new RunEventT(
    this.singleStep()
  );
}


unpackTo(_o: RunEventT): void {
  _o.singleStep = this.singleStep();
}
}

export class RunEventT implements flatbuffers.IGeneratedObject {
constructor(
  public singleStep: boolean = false
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return RunEvent.createRunEvent(builder,
    this.singleStep
  );
}
}
