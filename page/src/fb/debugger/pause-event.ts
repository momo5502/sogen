// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class PauseEvent implements flatbuffers.IUnpackableObject<PauseEventT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PauseEvent {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPauseEvent(bb:flatbuffers.ByteBuffer, obj?:PauseEvent):PauseEvent {
  return (obj || new PauseEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPauseEvent(bb:flatbuffers.ByteBuffer, obj?:PauseEvent):PauseEvent {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PauseEvent()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static startPauseEvent(builder:flatbuffers.Builder) {
  builder.startObject(0);
}

static endPauseEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPauseEvent(builder:flatbuffers.Builder):flatbuffers.Offset {
  PauseEvent.startPauseEvent(builder);
  return PauseEvent.endPauseEvent(builder);
}

unpack(): PauseEventT {
  return new PauseEventT();
}


unpackTo(_o: PauseEventT): void {}
}

export class PauseEventT implements flatbuffers.IGeneratedObject {
constructor(){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  return PauseEvent.createPauseEvent(builder);
}
}
